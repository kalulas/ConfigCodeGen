<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="netstandard" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)ConfigCodeGenLib\bin\Debug\netstandard2.0\ConfigCodeGenLib.dll" #>
<#@ assembly name="$(NuGetPackageRoot)\litjson\0.17.0\lib\netstandard2.0\LitJSON.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ConfigCodeGenLib" #>
<#@ import namespace="ConfigCodeGenLib.ConfigReader" #>
<#@ output extension=".cs" #>
<# 
var configJsonPath = "D:\\Desktop\\Workshop\\Others\\ConfigCodeGenSolution\\config.json";
var autoPickupCsvPath = "D:\\Desktop\\Workshop\\Others\\ConfigCodeGenSolution\\Example\\ConfigOriginal\\AutoPickupConfig.csv";
Configuration.ReadConfigurationFromJson(configJsonPath);
ConfigManager.singleton.ReadComment = true;
var configInfo = ConfigManager.singleton.Process(autoPickupCsvPath, ConfigCodeGenLib.ConfigReader.EConfigType.CSV);
#>
//using GCommon;
using System;
using System.Linq;

namespace COW {
    public abstract class CSVBaseData {
        public abstract void ParseData(long index, int fieldCount, string[] headers, string[] values);
        public abstract string GetPrimaryKey();
    }

    public class <#= configInfo.ConfigName #> : CSVBaseData {
<# 
foreach( var info in configInfo.AttributeInfos ){ 
#>
        /// <summary>
        /// <#= info.Comment #>
        /// </summary>
        <#= GetDeclareStatementStr(info) #>
<#
}
#>

        public override void ParseData(long index, int fieldCount, string[] headers, string[] values)
        {
<# 
foreach( var info in configInfo.AttributeInfos ){ 
#>
            <#= GetAssignStatementStr(info) #>
<#
}
#>
        }

<#
ConfigAttributeInfo primaryInfo;
if(TryGetPrimaryKey(configInfo.AttributeInfos, out primaryInfo)){
#>
        public override string GetPrimaryKey()
        {
            return "<#= primaryInfo.AttributeName #>";
        }
<#
}
#>
    }
}

<#+
    private string GetCollectionStr(ConfigAttributeInfo info)
    {
        return info.CollectionType=="array"?"[]":"";
    }

    private string GetTypeStr(ConfigAttributeInfo info){
        switch(info.ValueType){
        case "boolean":
            return "bool";
        default:
            return info.ValueType;
        }
    }

    private string GetCsvReaderAPITypeStr(ConfigAttributeInfo info){
        switch(info.ValueType){
        case "int":
            return "Int";
        case "uint":
            return "UInt";
        case "float":
            return "Float";
        case "boolean":
            return "Boolean";
        case "string":
            return "String";
        default:
            return info.ValueType;
        }
    }

    private string GetCsvReaderAPICollectionStr(ConfigAttributeInfo info){
        switch(info.CollectionType){
        case "array":
            return "Array";
        default:
            return string.Empty;
        }
    }

    private string GetCsvReaderAPIStr(ConfigAttributeInfo info){
       return $"Read{GetCsvReaderAPITypeStr(info)}{GetCsvReaderAPICollectionStr(info)}";
    }

    private string GetDeclareStatementStr(ConfigAttributeInfo attributeInfo){
       return $"public {GetTypeStr(attributeInfo)}{GetCollectionStr(attributeInfo)} {attributeInfo.AttributeName} {{ get; private set; }}";
    }

    private string GetAssignStatementStr(ConfigAttributeInfo info){
       return $"// {info.AttributeName} = {GetCsvReaderAPIStr(info)}({info.AttributeName}, headers, values);";
    }

    private bool TryGetPrimaryKey(ICollection<ConfigAttributeInfo> attributes, out ConfigAttributeInfo primary){
        primary = null;
        foreach(var attribute in attributes){
            if(attribute.HasTag("primary")){
                primary = attribute;
                return true;
            }
        }

        return false;
    }
#>